# circos.conf

karyotype = data/test_karyotype.txt

<<include ideogram.conf>>

<<include ticks.conf>>
<<include colors.brewer.conf>>

<colors>
chr1* = white
</colors>

<plots>

# Heat maps are used for data types which associate a value with a
# genomic position, or region. As such, this track uses the same data
# format as histograms.
#
# The track linearly maps a range of values [min,max] onto a list of colors c[n], i=0..N.
#
# f = (value - min) / ( max - min )
# n = N * f

<plot>
type  = histogram
file  = data/grouped/heatmap_bdbv_ebov_sudv_marv_113112.txt
r1    = 0.99r
r0    = 0.89r
min = 0
max = 4
fill_color =  grey#252,107,10

<backgrounds>
<background>
color = 242,239,239
</background>
</backgrounds>

# Colors are defined by a combination of lists or CSV. Color lists
# exist for all Brewer palletes (see etc/colors.brewer.lists.conf) as
# well as for N-step hue (hue-sN, e.g. hue-s5 =
# hue000,hue005,hue010,...) and N-color hue (hue-sN, e.g. hue-3 =
# hue000,hue120,hue140).

# If scale_log_base is used, the mapping is not linear, but a power law
#
# n = N * f**(1/scale_log_base)
#
# When scale_log_base > 1 the dynamic range for values close to min is expanded.
# When scale_log_base < 1 the dynamic range for values close to max is expanded.

<rules>

<rule>
condition=(var(marv) > 0.5) && ((var(value) > 0.5) + (var(ebov) > 0.5) + (var(sudv) > 0.5) == 3)
value=var(marv)
fill_color = red
</rule>

<rule>
condition=(var(marv) > 0.5) && ((var(value) > 0.5) + (var(ebov) > 0.5) + (var(sudv) > 0.5) == 2)
value=var(marv)
fill_color = orange
</rule>

<rule>
condition=(var(marv) > 0.5) && ((var(value) > 0.5) + (var(ebov) > 0.5) + (var(sudv) > 0.5) == 1)
value=var(marv)
fill_color = green
</rule>

<rule>
condition=(var(marv) > 0.5) && ((var(value) > 0.5) + (var(ebov) > 0.5) + (var(sudv) > 0.5) == 0)
value=var(marv)
fill_color = blue
</rule>

<rule>
condition=1
value=var(marv)
</rule>

</rules>

</plot>

<plot>
type  = histogram
file  = data/grouped/heatmap_bdbv_ebov_sudv_marv_113112.txt
r1    = 0.88r
r0    = 0.78r
min = 0
max = 4
fill_color = grey #252,107,10

<backgrounds>
<background>
color = 242,239,239
</background>
</backgrounds>

# Colors are defined by a combination of lists or CSV. Color lists
# exist for all Brewer palletes (see etc/colors.brewer.lists.conf) as
# well as for N-step hue (hue-sN, e.g. hue-s5 =
# hue000,hue005,hue010,...) and N-color hue (hue-sN, e.g. hue-3 =
# hue000,hue120,hue140).

# If scale_log_base is used, the mapping is not linear, but a power law
#
# n = N * f**(1/scale_log_base)
#
# When scale_log_base > 1 the dynamic range for values close to min is expanded.
# When scale_log_base < 1 the dynamic range for values close to max is expanded.

<rules>

<rule>
condition=(var(sudv) > 0.5) && ((var(value) > 0.5) + (var(ebov) > 0.5) + (var(marv) > 0.5) == 3)
value=var(sudv)
fill_color = red
</rule>

<rule>
condition=(var(sudv) > 0.5) && ((var(value) > 0.5) + (var(ebov) > 0.5) + (var(marv) > 0.5) == 2)
value=var(sudv)
fill_color = orange
</rule>

<rule>
condition=(var(sudv) > 0.5) && ((var(value) > 0.5) + (var(ebov) > 0.5) + (var(marv) > 0.5) == 1)
value=var(sudv)
fill_color = green
</rule>

<rule>
condition=(var(sudv) > 0.5) && ((var(value) > 0.5) + (var(ebov) > 0.5) + (var(marv) > 0.5) == 0)
value=var(sudv)
fill_color = blue
</rule>

<rule>
condition=1
value=var(sudv)
</rule>

</rules>

</plot>

<plot>
type  = histogram
file  = data/grouped/heatmap_bdbv_ebov_sudv_marv_113112.txt
r1    = 0.77r
r0    = 0.67r
min = 0
max = 4
fill_color =  grey #252,107,10

<backgrounds>
<background>
color = 242,239,239
</background>
</backgrounds>

# Colors are defined by a combination of lists or CSV. Color lists
# exist for all Brewer palletes (see etc/colors.brewer.lists.conf) as
# well as for N-step hue (hue-sN, e.g. hue-s5 =
# hue000,hue005,hue010,...) and N-color hue (hue-sN, e.g. hue-3 =
# hue000,hue120,hue140).

# If scale_log_base is used, the mapping is not linear, but a power law
#
# n = N * f**(1/scale_log_base)
#
# When scale_log_base > 1 the dynamic range for values close to min is expanded.
# When scale_log_base < 1 the dynamic range for values close to max is expanded.

<rules>

<rule>
condition=(var(ebov) > 0.5) && ((var(value) > 0.5) + (var(sudv) > 0.5) + (var(marv) > 0.5) == 3)
value=var(ebov)
fill_color = red
</rule>

<rule>
condition=(var(ebov) > 0.5) && ((var(value) > 0.5) + (var(sudv) > 0.5) + (var(marv) > 0.5) == 2)
value=var(ebov)
fill_color = orange
</rule>

<rule>
condition=(var(ebov) > 0.5) && ((var(value) > 0.5) + (var(sudv) > 0.5) + (var(marv) > 0.5) == 1)
value=var(ebov)
fill_color = green
</rule>

<rule>
condition=(var(ebov) > 0.5) && ((var(value) > 0.5) + (var(sudv) > 0.5) + (var(marv) > 0.5) == 0)
value=var(ebov)
fill_color = blue
</rule>

<rule>
condition=1
value=var(ebov)
</rule>

</rules>

</plot>

<plot>
type  = histogram
file  = data/grouped/heatmap_bdbv_ebov_sudv_marv_113112.txt
r1    = 0.66r
r0    = 0.56r
min = 0
max = 4
fill_color = grey #252,107,10

<backgrounds>
<background>
color = 242,239,239
</background>
</backgrounds>

# Colors are defined by a combination of lists or CSV. Color lists
# exist for all Brewer palletes (see etc/colors.brewer.lists.conf) as
# well as for N-step hue (hue-sN, e.g. hue-s5 =
# hue000,hue005,hue010,...) and N-color hue (hue-sN, e.g. hue-3 =
# hue000,hue120,hue140).

# If scale_log_base is used, the mapping is not linear, but a power law
#
# n = N * f**(1/scale_log_base)
#
# When scale_log_base > 1 the dynamic range for values close to min is expanded.
# When scale_log_base < 1 the dynamic range for values close to max is expanded.

<rules>

<rule>
condition=(var(value) > 0.5) && ((var(ebov) > 0.5) + (var(sudv) > 0.5) + (var(marv) > 0.5) == 3)
value=var(value)
fill_color = red
</rule>

<rule>
condition=(var(value) > 0.5) && ((var(ebov) > 0.5) + (var(sudv) > 0.5) + (var(marv) > 0.5) == 2)
value=var(value)
fill_color = orange
</rule>

<rule>
condition=(var(value) > 0.5) && ((var(ebov) > 0.5) + (var(sudv) > 0.5) + (var(marv) > 0.5) == 1)
value=var(value)
fill_color = green
</rule>

<rule>
condition=(var(value) > 0.5) && ((var(ebov) > 0.5) + (var(sudv) > 0.5) + (var(marv) > 0.5) == 0)
value=var(value)
fill_color = blue
</rule>

<rule>
condition=1
value=var(value)
</rule>

</rules>

</plot>

</plots>

################################################################
# The remaining content is standard and required. It is imported
# from default files in the Circos distribution.
#
# These should be present in every Circos configuration file and
# overridden as required. To see the content of these files,
# look in etc/ in the Circos distribution.

<image>
# Included from Circos distribution.
<<include etc/image.conf>>
angle_offset* = -75
</image>

# RGB/HSV color definitions, color lists, location of fonts, fill patterns.
# Included from Circos distribution.
<<include etc/colors_fonts_patterns.conf>>

# Debugging, I/O an dother system parameters
# Included from Circos distribution.
<<include etc/housekeeping.conf>>
