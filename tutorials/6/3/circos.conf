
<<include colors_fonts_patterns.conf>>

<<include ideogram.conf>>
<<include ticks.conf>>

<image>
<<include etc/image.conf>>
</image>

karyotype   = data/karyotype/karyotype.human.txt

chromosomes_units           = 1000000
chromosomes_display_default = no
chromosomes                 = hs1

#chromosomes_reverse = hs2

# lots of histograms here - let's take it one at a time

<plots>

type      = histogram
thickness = 2

# tall histogram immediately inside the ideogram circle
# background* parameters define a colored backdrop for this histogram
# axes* define y-axes

<plot>

show    = yes

max_gap = 5u
file    = data/6/snp.density.250kb.txt
#file = hist.txt
color   = vdgrey
min     = 0
max     = 0.015
r0      = 0.8r
r1      = 0.975r

#fill_color  = red

stroke_type = bin # outline | bin | both

<backgrounds>
<background>
color = vvlgrey
</background>
</backgrounds>

<axes>
<axis>
spacing = 0.1r
color   = lgrey
thickness = 2
</axis>
</axes>

# color the histogram by value value and
# only plot points every 2Mb

<rules>

<rule>
condition    = var(value) > 0.006
color        = dgreen
fill_color   = green
</rule>

<rule>
condition    = var(value) < 0.002
color        = dred
fill_color   = red
</rule>

</rules>

</plot>

# Dense histogram outside ideogram circle

<plot>

show    = yes

file    = data/6/snp.density.txt
z       = 5
max_gap = 5u
color   = black
min     = 0
max     = 0.015
r0      = 1.075r
r1      = 1.175r
</plot>

# precomputed average of previous histogram, drawn
# underneath and filled under. The fill color is
# adjusted based on value

<plot>

show       = yes

file       = data/6/snp.density.1mb.txt
max_gap    = 1u
fill_under = yes
fill_color = lgrey
thickness  = 0
min        = 0
max        = 0.015
r0         = 1.075r
r1         = 1.175r

<rules>
<rule>
condition  = var(value) > 0.006
fill_color = lgreen
</rule>
<rule>
condition  = var(value) > 0.004
fill_color = lorange
</rule>
<rule>
condition  = var(value) > 0.003
fill_color = lred
</rule>

</rules>
</plot>

# histograms with randomly assigned values and
# bin sizes, illustrating how Circos handles
# variable-sized bins

# simple outline - bins are not extended

<plot>

file       = data/6/hist.random.txt
extend_bin = no
color      = black
min        = 0
max        = 1
r0         = 0.75r
r1         = 0.79r
</plot>

# simple outline - bins are extended

<plot>

file  = data/6/hist.random.txt
color = black
min   = 0
max   = 1
r0    = 0.7r
r1    = 0.74r
</plot>

# colored by value - bins are not extended

<plot>

file       = data/6/hist.random.2.txt
extend_bin = no
color      = black
min        = 0
max        = 1
r0         = 0.65r
r1         = 0.69r
<rules>
<rule>
condition = var(value) > 0.9
color = green
</rule>
<rule>
condition = var(value) < 0.1
color = red
</rule>
<rule>
condition = var(value) > 0.45 && var(value) < 0.55
color = orange
</rule>
</rules>
</plot>

# colored by value - bins are extended

<plot>

file  = data/6/hist.random.2.txt
color = black
min   = 0
max   = 1
r0    = 0.6r
r1    = 0.64r
<rules>
<rule>
condition = var(value) > 0.9
color = green
</rule>
<rule>
condition = var(value) < 0.1
color = red
</rule>
<rule>
condition = var(value) > 0.45 && var(value) < 0.55
color = orange
</rule>
</rules>
</plot>

# filled under with grey, oriented out (default)

<plot>

file       = data/6/hist.random.3.txt
z          = 5
extend_bin = no
color      = black
fill_under = yes
fill_color = lgrey
min        = 0
max        = 1
r0         = 0.55r
r1         = 0.59r
</plot>

# filled under with grey, oriented out (default) - bins are extended

<plot>

file       = data/6/hist.random.3.txt
z          = 5
color      = black
fill_under = yes
fill_color = lgrey
min        = 0
max        = 1
r0         = 0.5r
r1         = 0.54r
</plot>

# filled under with grey, oriented in

<plot>
file        = data/6/hist.random.4.txt
z           = 5
orientation = in
color       = black
fill_under  = yes
fill_color  = lblue
min         = 0
max         = 1
r0          = 0.46r
r1          = 0.5r
</plot>

# filled under with orange, oriented out, 
# complementary to the previous histogram
#
# here, I've used the previous histogram data
# and remapped its value using a rule which
# assigns a new data value new=1-old
#
# this remapping has the effect of making the
# the histograms fit into one another (peak of one
# fits exactly into valley of other)

<plot>
file       = data/6/hist.random.4.txt
z          = 5
color      = black
fill_under = yes
fill_color = orange
min        = 0
max        = 1
r0         = 0.46r
r1         = 0.5r
<rules>
<rule>
condition  = 1
value      = eval(1-var(value))
</rule>
</rules>
</plot>

# another random histogram, oriented in

<plot>
file        = data/6/hist.random.5.txt
orientation = in
color       = black
fill_under  = yes
fill_color  = orange
min         = 0
max         = 1
r0          = 0.42r
r1          = 0.46r
</plot>

<plot>
file        = data/6/hist.random.5.txt
orientation = in
color       = black
extend_bin  = no
fill_under  = yes
fill_color  = orange
min         = 0
max         = 1
r0          = 0.36r
r1          = 0.41r
</plot>

</plots>

<<include etc/housekeeping.conf>>
data_out_of_range* = trim